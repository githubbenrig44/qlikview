///$tab Documentation
/*

Use XLS here:
https://wss.opr.statefarm.org/sites/wss000429/C02547/Shared%20Documents/QlikView/DB2%20tables%20VIEWs%20schemas%20and%20environments%20used%20by%20QVW%20ECS.xlsx

and worksheet named:
Detect_all_required_VIEWs.QVW

and instructions here:
http://answers.yahoo.com/question/index?qid=20090310231438AARmli8

to build the text value that feeds variable:
publisher.v_parameter_views_to_check

on tab named [DEBUG CODE Set Publisher parameter DEBUG CODE] in this QVW
OR
QlikView Publisher 


*/
///$tab Common Routines




// INCLUDE common routines e.g. logging etc

let v_include_filename = '..\..\includes\QVW ECS Common Functions.TXT' ;

trace Attempting to INCLUDE file [$(v_include_filename)] ;

if IsNull (FileTime( v_include_filename ))  THEN ; trace File doesnt exist [ $(v_include_filename) ] ; EXIT SCRIPT ; END IF  ;

$(Include=$(v_include_filename));


call sub_trace_event ('INCLUDE file was found and incorporated into script') ; // and this procedure call is proof!



//exit script ;
///$tab Default Settings
SET ThousandSep=',';
SET DecimalSep='.';
SET MoneyThousandSep=',';
SET MoneyDecimalSep='.';
SET MoneyFormat='$#,##0.00;($#,##0.00)';
SET TimeFormat='h:mm:ss TT';
SET DateFormat='M/D/YYYY';
SET TimestampFormat='M/D/YYYY h:mm:ss[.fff] TT';
SET MonthNames='Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec';
SET DayNames='Mon;Tue;Wed;Thu;Fri;Sat;Sun';

let vHighValues='9999-12-31-23.59.59.999999' ; trace vHighValues=[$(vHighValues)] ; // may be used in SQL constructs 

// where we still store QVD files
Set vDataDir =; // dont need it so NULLing will find references to it I should remove

// make sure variables have deafult NULL value to start with
LET v_row_count =;
LET v_zero_row_indicator= ;
///$tab Database connect
// Get QVW ECS Environment Parameters.TXT
// Will initially INCLUDE "QVW ECS Environment Parameters.TXT" from 
// <app>\Includes
// e.g. "SAN\Projects\Claims\ECS Dashboard\Includes" and "SAN\Projects\Claims\CSI\Includes"

// INCLUDE "QVW ECS Get Daily Processing Dates.TXT"

let v_include_filename = '..\..\includes\QVW ECS Environment Parameters.TXT' ;

trace Attempting to INCLUDE file [$(v_include_filename)] ;

if IsNull (FileTime( v_include_filename ))  THEN ; trace File doesnt exist [ $(v_include_filename) ] ; EXIT SCRIPT ; END IF  ;

$(Include=$(v_include_filename));


///$tab Debug Settings



// debug code
let v_max_rows =;
//let v_max_rows =;  // use this to turn it off

let v_limit_number_of_rows_sql = if( IsNull (v_max_rows), NULL, 'FETCH FIRST ' & v_max_rows & ' ROWS ONLY' ) ;

let v_limit_number_of_rows_qvw = if( IsNull (v_max_rows), ' /* dont restrict row count */', ' FIRST ' & v_max_rows & ' ' ) ;


// ensure value is correct before releasing code
let v_store_qvd_files = 'Y' ; // 'N' determines if STORE commands in script actually write out QVD files. During debug you may not wish to over-write existing QVD files


// ensure value is correct before releasing code
// use in all SELECT statements to prevent the database taking any time or resources when checking SQL without returnign any rows. 
//Used during debugging. 1=0 is always false and db2 will immediately determine that and return no rows and expend less effort before returning zero rows

// recommended placement: WHERE $(v_sql_debug_condition) and 

let v_sql_debug_condition = '1=1' ; 
//let v_sql_debug_condition = '1=1' ; 
///$tab DEBUG CODE Set Publisher parameter DEBUG CODE
//set publisher.v_parameter_views_to_check = 'DAL,AUTO_CLM_PRTPT_DIM\DAL,AUTO_CLM_STTS_CHNG_TRANS_FACT\DAL,AUTO_COL_STTS_CHNG_TRANS_FACT\DAL,example_of_bad_view_name\DAL,AUTO_EST_FINAL_VER_DAILY_FACT\DAL,AUTO_FNCL_AGG_DAILY_SNPST_FACT\DAL,AUTO_RNTL_RSRV_DIM\DAL,AUTO_RNTL_BILL_DAILY_SNPS_FACT\DAL,CLM_PRFM_ORGZN_DIM\DAL,CLM_PRFM_ORGZN_NAT_DIM\\DAL,ECS_BILL_DIM\CCHD,AUTO_PLCY_hist\CCHD,BILL_CHNG_DETL_HIST\CCHD,BILL_CHNG_HIST\CCHD,BILL_CHNG_RESN_HIST\CCHD,BILL_HIST\CCHD,BILL_PARTY_ROLE_HIST\CCHD,CD_DCODE\CCHD,CD_RLTN\CCHD,CLM_GRP_DT\CCHD,CLM_GRP_HIST\CCHD,CLM_HIST\CCHD,CLM_PLCY_RLTN_HIST\CCHD,CLM_PRTPT\CCHD,CMPLT_TASK_HIST\CCHD,COL_CLM_HIST\CCHD,COL_HIST\CCHD,COL_PTL_MRG_CORR_HIST\CCHD,ECS_ORGZN_FLAT_CCHD_VW\CCHD,ECS_ORGZN_STR_FLAT_CCHD_VW\CCHD,FIRE_CLM_HIST\CCHD,FIRE_PLCY_HIST\CCHD,ORGZN_LANG_HIST\CCHD,ORGZN_SBTYP\CCHD,PLCY_AGT\CCHD,PLCY_FORM\CCHD,PMT_COL_HIST\CCHD,PRFM_HIST\CCHD,PTL_HIST\CCHD,RNTL_VEH_RSRV_RPLC\CCHD,SUIT_ADR_COL\CCHD,TASK_ASGN_HSTRY\CCHD,TASK_HIST\TELEPHONY,ASSOC_OPRTN\TELEPHONY,CALL_TYPE_INTVL_MTRC\TELEPHONY,CCN_SITE_TRGT\TELEPHONY,ENPRS_REP_INTVL_CALL_MTRC\TELEPHONY,ENPRS_SERV_OPRTN_DIM\TELEPHONY,ENPRS_SERV_RVW\TELEPHONY,ENPRS_WKFRC_MGT\TELEPHONY,ESOM_DSHBRD_CMNTS\TELEPHONY,FNCL_MTRC\TELEPHONY,QB_ONLN_DBASE_EMPLE\TELEPHONY,QB_ONLN_DBASE_ORG\TELEPHONY,QUOT_BIND_DETL_FACT\TELEPHONY,REP_CALL_MTRC_DAILY_FACT\TELEPHONY,REP_INTVL_CALL_MTRC\TELEPHONY,SFPP_CALL_ACTVY_DLY_FACT\TELEPHONY,SFPP_DASHBRD_CMNTS\TELEPHONY,SRVY_SYS_QSTN_ORG\TELEPHONY,SRVY_SYS_RSPNS_ORG\TELEPHONY,WKFRC_MGT\TELEPHONY,WKFRC_MGT_ORGZN\TELEPHONY,WTNS_SC_SS_ORG';

//call debug_code_warning ('Variable [publisher.v_parameter_views_to_check] is being over-ridden in this script') ;
//
//
//set publisher.v_parameter_views_to_check = 'CCHD,AUTO_PLCY_HIST\CCHD,BILL_CHNG_DETL_HIST\CCHD,BILL_CHNG_HIST\CCHD,BILL_CHNG_RESN_HIST\CCHD,BILL_HIST\CCHD,BILL_PARTY_ROLE_HIST\CCHD,CD_DCODE\CCHD,CD_RLTN\CCHD,CLM_GRP_DT\CCHD,CLM_GRP_HIST\CCHD,CLM_HIST\CCHD,CLM_PLCY_RLTN_HIST\CCHD,CLM_PRTPT\CCHD,CMPLT_TASK_HIST\CCHD,COL_CLM_HIST\CCHD,COL_HIST\CCHD,COL_PTL_MRG_CORR_HIST\CCHD,ECS_ORGZN_FLAT_CCHD_VW\CCHD,ECS_ORGZN_STR_FLAT_CCHD_VW\CCHD,FIRE_CLM_HIST\CCHD,FIRE_PLCY_HIST\CCHD,ORGZN_LANG_HIST\CCHD,ORGZN_SBTYP\CCHD,PLCY_AGT\CCHD,PLCY_FORM \CCHD,PMT_COL_HIST\CCHD,PRFM_HIST\CCHD,PTL_HIST\CCHD,RNTL_VEH_RSRV_RPLC\CCHD,SUIT_ADR_COL\CCHD,TASK_ASGN_HSTRY\CCHD,TASK_HIST\DAL,AUTO_CLM_PRTPT_DIM\DAL,AUTO_CLM_STTS_CHNG_TRANS_FACT\DAL,AUTO_COL_STTS_CHNG_TRANS_FACT\DAL,AUTO_EST_FINAL_VER_DAILY_FACT\DAL,AUTO_FNCL_AGG_DAILY_SNPST_FACT\DAL,AUTO_RNTL_RSRV_DIM\DAL,AUTO_RNTL_BILL_DAILY_SNPS_FACT\DAL,CLM_PRFM_ORGZN_DIM\DAL,CLM_PRFM_ORGZN_NAT_DIM\DAL,ECS_BILL_DIM\TELEPHONY,ASSOC_OPRTN\TELEPHONY,CALL_CNTR_EMPLE_LKUP\TELEPHONY,CALL_TYPE_INTVL_MTRC\TELEPHONY,CCN_SITE_TRGT\TELEPHONY,DT_DIM\TELEPHONY,ENPRS_REP_INTVL_CALL_MTRC \TELEPHONY,ENPRS_SERV_OPRTN_DIM\TELEPHONY,ENPRS_SERV_RVW\TELEPHONY,ENPRS_WKFRC_MGT \TELEPHONY,ESOM_DSHBRD_CMNTS\TELEPHONY,FNCL_MTRC\TELEPHONY,QB_ONLN_DBASE_EMPLE\TELEPHONY,QB_ONLN_DBASE_ORG\TELEPHONY,QUOT_BIND_DETL_FACT\TELEPHONY,REP_CALL_MTRC_DAILY_FACT\TELEPHONY,REP_INTVL_CALL_MTRC\TELEPHONY,SFPP_CALL_ACTVY_DLY_FACT\TELEPHONY,SFPP_DASHBRD_CMNTS\TELEPHONY,SRVY_SYS_QSTN_ORG\TELEPHONY,SRVY_SYS_RSPNS_ORG\TELEPHONY,WKFRC_MGT\TELEPHONY,WKFRC_MGT_ORGZN\TELEPHONY,WTNS_SC_SS_ORG\CCHD,SUBR_HIST\CCHD,SUBR_PAID_LOS_DETL_HIST\CCHD,SUBR_PRTPT_DETL_HIST\CCHD,SUBR_ROUTE_HIST\CCHD,SUBR_SUPRT_DOC_HIST\CCHD,CLM_SEG\CCHD,REFR_CLM_SEG\'; 
//
//
//call debug_code_warning ('Variable [publisher.v_parameter_views_to_check] is being over-ridden in this script') ;


//
SET publisher.v_parameter_views_to_check =
'
DAL	,	AUTO_CLM_PRTPT_DIM
DAL	,	AUTO_CLM_STTS_CHNG_TRANS_FACT
DAL	,	AUTO_COL_STTS_CHNG_TRANS_FACT
DAL	,	AUTO_EST_FINAL_VER_DAILY_FACT
DAL	,	AUTO_FNCL_AGG_DAILY_SNPST_FACT
DAL	,	AUTO_RNTL_BILL_DAILY_SNPS_FACT
DAL	,	AUTO_RNTL_RSRV_DIM
DAL	,	CLM_PRFM_ORGZN_DIM
DAL	,	CLM_PRFM_ORGZN_NAT_DIM
DAL	,	ECS_BILL_DIM
CCHD	,	APAY_PRTPT
CCHD	,	AUTO_PLCY_HIST
CCHD	,	BILL_CHNG_DETL_HIST
CCHD	,	BILL_CHNG_HIST
CCHD	,	BILL_CHNG_RESN_HIST
CCHD	,	BILL_HIST
CCHD	,	BILL_PARTY_ROLE_HIST
CCHD	,	CD_DCODE
CCHD	,	CD_RLTN
CCHD	,	CLM_GRP_DT
CCHD	,	CLM_GRP_HIST
CCHD	,	CLM_HIST
CCHD	,	CLM_PLCY_RLTN_HIST
CCHD	,	CLM_PRFM_ORGZN_NAT_DIM
CCHD	,	CLM_PRTPT
CCHD	,	CLM_SEG
CCHD	,	CMPLT_TASK_HIST
CCHD	,	COL_CLM_HIST
CCHD	,	COL_HIST
CCHD	,	COL_PTL_MRG_CORR_HIST
CCHD	,	ECS_ORGZN_FLAT_CCHD_VW
CCHD	,	ECS_ORGZN_STR_FLAT_CCHD_VW
CCHD	,	FIRE_CLM_HIST
CCHD	,	FIRE_PLCY_hist
CCHD	,	MEDCL_TRTMT_PLAN
CCHD	,	ORGZN_LANG_HIST
CCHD	,	ORGZN_SBTYP
CCHD	,	PLCY_AGT
CCHD	,	PLCY_FORM 
CCHD	,	PMT_COL_HIST
CCHD	,	PRFM_HIST
CCHD	,	PRTPT_ASSN
CCHD	,	PTL_HIST
CCHD	,	REFR_CLM_SEG
CCHD	,	RNTL_VEH_RSRV_RPLC
CCHD	,	SUBR_HIST
CCHD	,	SUBR_PAID_LOS_DETL
CCHD	,	SUBR_PRTPT_DETL_HIST
CCHD	,	SUBR_ROUTE_HIST
CCHD	,	SUBR_SUPRT_DOC_HIST
CCHD	,	SUIT_ADR_COL
CCHD	,	TASK_ASGN_HSTRY
CCHD	,	TASK_HIST
CCHD	,	FILE_CHNG 
CCHD	,	FILE_CHNG_DETL 
CCHD	,	FILE_CHNG_AR_VW
CCHD	,	FILE_CHNG_DETL_AR_VW
TELEPHONY	,	ASSOC_OPRTN
TELEPHONY	,	CALL_CNTR_EMPLE_LKUP
TELEPHONY	,	CALL_TYPE_INTVL_MTRC
TELEPHONY	,	CCN_SITE_TRGT
TELEPHONY	,	DT_DIM
TELEPHONY	,	ENPRS_REP_INTVL_CALL_MTRC 
TELEPHONY	,	ENPRS_SERV_OPRTN_DIM
TELEPHONY	,	ENPRS_SERV_RVW
TELEPHONY	,	ENPRS_WKFRC_MGT 
TELEPHONY	,	ESOM_DSHBRD_CMNTS
TELEPHONY	,	FNCL_MTRC
TELEPHONY	,	QB_ONLN_DBASE_EMPLE
TELEPHONY	,	QB_ONLN_DBASE_ORG
TELEPHONY	,	QUOT_BIND_DETL_FACT
TELEPHONY	,	REP_CALL_MTRC_DAILY_FACT
TELEPHONY	,	REP_INTVL_CALL_MTRC
TELEPHONY	,	SFPP_CALL_ACTVY_DLY_FACT
TELEPHONY	,	SFPP_DASHBRD_CMNTS
TELEPHONY	,	SRVY_SYS_QSTN_ORG
TELEPHONY	,	SRVY_SYS_RSPNS_ORG
TELEPHONY	,	WKFRC_MGT
TELEPHONY	,	WKFRC_MGT_ORGZN
TELEPHONY	,	WTNS_SC_SS_ORG'
;
//
//TRACE $(publisher.v_parameter_views_to_check) ;
//// TELEPHONY,CALL_CNTR_EMPLE_LKUP
//// TELEPHONY,DT_DIM


/*
TELEPHONY,ASSOC_OPRTN
TELEPHONY,CALL_TYPE_INTVL_MTRC
TELEPHONY,CCN_SITE_TRGT
TELEPHONY,ENPRS_REP_INTVL_CALL_MTRC 
TELEPHONY,ENPRS_SERV_OPRTN_DIM
TELEPHONY,ENPRS_SERV_RVW
TELEPHONY,ENPRS_WKFRC_MGT 
TELEPHONY,ESOM_DSHBRD_CMNTS
TELEPHONY,FNCL_MTRC
TELEPHONY,QB_ONLN_DBASE_EMPLE
TELEPHONY,QB_ONLN_DBASE_ORG
TELEPHONY,QUOT_BIND_DETL_FACT
TELEPHONY,REP_CALL_MTRC_DAILY_FACT
TELEPHONY,REP_INTVL_CALL_MTRC
TELEPHONY,SFPP_CALL_ACTVY_DLY_FACT
TELEPHONY,SFPP_DASHBRD_CMNTS
TELEPHONY,SRVY_SYS_QSTN_ORG
TELEPHONY,SRVY_SYS_RSPNS_ORG
TELEPHONY,WKFRC_MGT
TELEPHONY,WKFRC_MGT_ORGZN
TELEPHONY,WTNS_SC_SS_ORG'

*/

/*
DAL,AUTO_CLM_STTS_CHNG_TRANS_FACT
DAL,AUTO_COL_STTS_CHNG_TRANS_FACT
DAL,example_of_bad_view_name
DAL,AUTO_EST_FINAL_VER_DAILY_FACT
DAL,AUTO_FNCL_AGG_DAILY_SNPST_FACT
CCHD,AUTO_PLCY_hist
CCHD,BILL_CHNG_DETL_HIST
CCHD,BILL_CHNG_HIST
CCHD,BILL_CHNG_RESN_HIST
CCHD,BILL_HIST
CCHD,BILL_PARTY_ROLE_HIST
CCHD,CD_DCODE
CCHD,CD_RLTN
CCHD,CLM_GRP_DT
CCHD,CLM_GRP_HIST
CCHD,CLM_HIST
CCHD,CLM_PLCY_RLTN_HIST
CCHD,CLM_PRTPT
CCHD,REFR_CLM_SEG 
CCHD,CLM_SEG 
CCHD,CMPLT_TASK_HIST
CCHD,COL_CLM_HIST
CCHD,COL_HIST
CCHD,COL_PTL_MRG_CORR_HIST
CCHD,ECS_ORGZN_FLAT_CCHD_VW
CCHD,ECS_ORGZN_STR_FLAT_CCHD_VW
CCHD,FIRE_CLM_HIST
CCHD,FIRE_PLCY_HIST
CCHD,ORGZN_LANG_HIST
CCHD,ORGZN_SBTYP
CCHD,PLCY_AGT
CCHD,PLCY_FORM 
CCHD,PMT_COL_HIST
CCHD,PRFM_HIST
CCHD,PTL_HIST
CCHD,RNTL_VEH_RSRV_RPLC
CCHD,SUIT_ADR_COL
CCHD,TASK_ASGN_HSTRY
CCHD,TASK_HIST
*/
///$tab >>>>
///$tab List of VIEWs and locations

// uses publisher variable to define a INLINE table
// no error checking here so must be set properly in Publisher

// variable [publisher.v_parameter_views_to_check] 

LET  v_local_publisher.v_parameter_views_to_check = publisher.v_parameter_views_to_check ; // store this to show what we received in final output

let CONST_CR_LF = chr(13)  ;

let publisher.v_parameter_views_to_check = REPLACE (publisher.v_parameter_views_to_check , '\', CONST_CR_LF) ; // REPLACE '\' WITH NEWLINE SO THAT INLINE WORKS


list_of_VIEWs_to_check:
NoConcatenate
load * INLINE [
LOCATION,VIEW_NAME
$(publisher.v_parameter_views_to_check)
];

//exit script
///$tab Prepare empty LOG table



detection_log_table:
NOCONCATENATE 
LOAD * INLINE [
TABLE_OR_VIEW_NAME,ROW_COUNT,LOCATION,STATUS
] ;
		
		
///$tab Detect all required VIEWs



//  TODO - ANOTHER WAY OF WRITING THIS WOULD BE A FOR LOOP PROCESSING A LIST.
// THE BENEFIT OF THAT IS THAT EVERY ERROR WOULD BE FOUND INSTEAD OF JUST THE FIRST ERROR
// MORE CODE, BUT MORE FUNCTIONALITY



// given a specific DB2 VIEW name, this procedure will check that the VIEW exists, the login has permissions to SELECT it etc

let v_number_of_VIEWs = NoOfRows ('list_of_VIEWs_to_check') ;
let v_error_count=0 ;
LET v_zero_row_indicator = 0 ;

FOR v_index = 1 to v_number_of_VIEWs ;
//call debug_code_warning ('FOR v_index = 1 to 5 ;') ; FOR v_index = 1 to 5 ; 


	let v_view_location = trim (PEEK ('LOCATION', v_index-1 ,'list_of_VIEWs_to_check') ) ;
	let v_view_name = trim (PEEK ('VIEW_NAME', v_index-1 ,'list_of_VIEWs_to_check') ) ;

	switch v_view_location
	
		case 'DAL'
			let v_schema_prefix = vDALSchemaName ;
		
		CASE 'CCHD'
			let v_schema_prefix = vSchemaName ;
		
		CASE 'TELEPHONY'
			let v_schema_prefix  = vTelephonySchemaName ;
		DEFAULT
			
	end Switch ;
	
	call sub_trace_event ('') ; 
	call sub_trace_event ('Checking DB2 VIEW name [$(v_view_name)] in location [$(v_view_location)]  ($(v_index)/$(v_number_of_VIEWs))' ) ;
	call sub_trace_event ('SQL being issued is: SELECT count(*) AS ROW_COUNT FROM $(v_schema_prefix)$(vSchema_Extension).$(v_view_name) WHERE $(v_sql_debug_condition)') ;

	
	call sub_trace_event ('') ; 
	
	set ErrorMode =0 ;
	check_the_VIEWs:
	NoConcatenate
	LOAD 
		*
	;
	SELECT 
		count(*) AS ROW_COUNT
		,
		(SELECT TEXT  FROM SYSCAT.VIEWS WHERE VIEWNAME = '$(v_view_name)' and viewschema = '$(v_schema_prefix)$(vSchema_Extension)' )  AS VIEW_DEFINITION
	FROM 
		$(v_schema_prefix)$(vSchema_Extension).$(v_view_name)
	WHERE 	$(v_sql_debug_condition)
	;

	let v_ScriptError = ScriptError  ; //call output_variable_values ('v_ScriptError') ;
	
	
	if v_ScriptError <> 0 THEN 
		
		call generate_error ('The current connection and/or login cannot SELECT from VIEW [$(v_view_name)] located in [$(v_view_location)]') ;
		let v_error_count = v_error_count + 1 ;
		
		let v_ScriptErrorDetails = ScriptErrorDetails ;
		LET v_status = 'The current connection and/or login cannot SELECT from VIEW or TABLE due to an unknown error, but most likely the VIEW or TABLE does not exist on the database ' ;
		LET v_row_count = -1 ;
		
	ELSE
	
		if NoOfRows ('check_the_VIEWs') > 0 THEN // if we had set DEBUG to 1=0 then there wouldnt be any rows and we only want to check if there were rows

			LET v_row_count = PEEK ('ROW_COUNT', 0, 'check_the_VIEWs') ;
			LET v_VIEW_SQL = PEEK ('VIEW_DEFINITION', 0, 'check_the_VIEWs') ;

			call sub_trace_event ('VIEW [$(v_view_name)] has [$(v_row_count)] rows and SQL of :$(v_VIEW_SQL)') ;
			if v_row_count = 0 THEN
				LET v_zero_row_indicator = v_zero_row_indicator  + 1 ;
				LET v_status = 'VIEW or TABLE returns zero rows (this may be expected or not)' ;

			ELSE
		
				let v_status = 'OK' ;
			
			END IF ;
		
		
			
		END IF ;
		
		call drop_table ('check_the_VIEWs') ;
		
	END IF ;


	CONCATENATE 
		(detection_log_table)
	LOAD * INLINE [
	TABLE_OR_VIEW_NAME,ROW_COUNT,LOCATION,STATUS
	$(v_view_name),$(v_row_count),$(v_view_location),$(v_status)
	] ;
			


	set ErrorMode =1 ;

	
	call drop_table_if_exists ('check_the_VIEWs') ;
	
NEXT v_index ;


DROP TABLE list_of_VIEWs_to_check ;

if v_error_count > 0 then
	call generate_warning ('There were [$(v_error_count)] errors detected in this script');
ELSE
	call sub_trace_event ('') ;
	call sub_trace_event ('---------------------------------------------------------------------------') ;
	
	call sub_trace_event ('					There were no errors detected in this script') ;
	call sub_trace_event ('---------------------------------------------------------------------------') ;
	call sub_trace_event ('') ;
	
		
ENDIF ;

IF v_zero_row_indicator >0 THEN
	call generate_warning ('At least [$(v_zero_row_indicator)] VIEWs have zero rows returned by the SELECT query when COUNT(*) is used. This may be an issue with the schema/environment or may be as expected. Please check it out') ;
END IF ;

IF v_error_count >0 THEN
	call generate_warning ('At least [$(v_error_count)] errors were detected. Please review complete LOG file') ;
END IF ;


if v_error_count>0 or v_zero_row_indicator >0 THEN
	sleep 1000 ; // wait 1 second to allow Script Execution Window to catch up
	// todo-if at all unsure of code's ability to detect if running in Publisher then do not enable the line below
	//call generate_warning_dialog ('There are errors or warnings in the LOG file. Please review' ) ;
	sleep 1000 ; // wait 1 second to allow Script Execution Window to catch up
END IF ;
///$tab Cleanup
//**************************************
//Drop all remaining tables 
//**************************************


STORE 'detection_log_table' INTO '.\Detect_all_required_VIEWs.QVW.detection_log_table.CSV' (TXT) ;



call drop_all_tables ;

lET publisher.v_parameter_views_to_check =;



///$tab <<<<
///$tab **EXIT SCRIPT**


EXIT SCRIPT
///$tab Get parameter from Publisher
//call sub_trace_event ('');
//call sub_trace_event ('Processing parameter to determine database VIEWs to check');
//call sub_trace_event ('');
//
//LET  v_local_publisher.v_parameter_views_to_check = publisher.v_parameter_views_to_check ; // store this to show what we received in final output
//
//LET publisher.v_parameter_views_to_check=UPPER (TRIM (publisher.v_parameter_views_to_check)) ; // tidy it up
//
//let v_command = LEFT (publisher.v_parameter_adjustment, index( LOWER (TRIM (publisher.v_parameter_adjustment) ) & '=', '=', 1) -1 ) ;  // adds a '=' and grabs all text to its left
//let v_parameter = MID (publisher.v_parameter_adjustment, INDEX (publisher.v_parameter_adjustment, '=', 1)+1) ;
//
//call output_variable_values ('v_command,publisher.v_parameter_adjustment,v_parameter') ;
//
//IF v_command = '' THEN
//	
//	call generate_error ('The value passed by Publisher variable [publisher.v_parameter_adjustment] cannot be used. Contact ECS QVW Support') ;
//	// -todogenerate MSGBOX
//	CALL sub_trace_event ('Invalid parameter will be defaulted to [read_only]') ;
//	let v_command = 'read_only' ; 
//	//	EXIT Script ;
//
//END IF ;
//
//
//switch v_command
//
//		
//case 'daily_set' // sets daily LAST and NEXT to specific values and does not use the contents of the QVD as a starting point
///$tab List of VIEWs and locations
//// 
//
//
//// Use the following XLS to populate the list below.
//// TODO-FUTURE VERSION COULD LOAD XLS FROM SHAREPOINT DIRECTLY
//// https://wss.opr.statefarm.org/sites/wss000429/C02547/Shared%20Documents/QlikView/DB2%20tables%20VIEWs%20schemas%20and%20environments%20used%20by%20QVW%20ECS.xlsx
//
//
//call sub_trace_event ('Starting load of table : list_of_VIEWs_to_check') ;
//
//list_of_VIEWs_to_check:
//NoConcatenate
//load * INLINE [
//LOCATION,VIEW_NAME
//DAL,AUTO_CLM_PRTPT_DIM
//DAL,AUTO_CLM_STTS_CHNG_TRANS_FACT
//DAL,AUTO_COL_STTS_CHNG_TRANS_FACT
//DAL,example_of_bad_view_name
//DAL,AUTO_EST_FINAL_VER_DAILY_FACT
//DAL,AUTO_FNCL_AGG_DAILY_SNPST_FACT
//DAL,AUTO_RNTL_RSRV_DIM
//DAL,AUTO_RNTL_BILL_DAILY_SNPS_FACT
//DAL,CLM_PRFM_ORGZN_DIM
//DAL,CLM_PRFM_ORGZN_NAT_DIM
//DAL,ECS_BILL_DIM
//CCHD,AUTO_PLCY_hist
//CCHD,BILL_CHNG_DETL_HIST
//CCHD,BILL_CHNG_HIST
//CCHD,BILL_CHNG_RESN_HIST
//CCHD,BILL_HIST
//CCHD,BILL_PARTY_ROLE_HIST
//CCHD,CD_DCODE
//CCHD,CD_RLTN
//CCHD,CLM_GRP_DT
//CCHD,CLM_GRP_HIST
//CCHD,CLM_HIST
//CCHD,CLM_PLCY_RLTN_HIST
//CCHD,CLM_PRTPT
//CCHD,CMPLT_TASK_HIST
//CCHD,COL_CLM_HIST
//CCHD,COL_HIST
//CCHD,COL_PTL_MRG_CORR_HIST
//CCHD,ECS_ORGZN_FLAT_CCHD_VW
//CCHD,ECS_ORGZN_STR_FLAT_CCHD_VW
//CCHD,FIRE_CLM_HIST
//CCHD,FIRE_PLCY_HIST
//CCHD,ORGZN_LANG_HIST
//CCHD,ORGZN_SBTYP
//CCHD,PLCY_AGT
//CCHD,PLCY_FORM 
//CCHD,PMT_COL_HIST
//CCHD,PRFM_HIST
//CCHD,PTL_HIST
//CCHD,RNTL_VEH_RSRV_RPLC
//CCHD,SUIT_ADR_COL
//CCHD,TASK_ASGN_HSTRY
//CCHD,TASK_HIST
//TELEPHONY,ASSOC_OPRTN
//TELEPHONY,CALL_CNTR_EMPLE_LKUP
//TELEPHONY,CALL_TYPE_INTVL_MTRC
//TELEPHONY,CCN_SITE_TRGT
//TELEPHONY,DT_DIM
//TELEPHONY,ENPRS_REP_INTVL_CALL_MTRC 
//TELEPHONY,ENPRS_SERV_OPRTN_DIM
//TELEPHONY,ENPRS_SERV_RVW
//TELEPHONY,ENPRS_WKFRC_MGT 
//TELEPHONY,ESOM_DSHBRD_CMNTS
//TELEPHONY,FNCL_MTRC
//TELEPHONY,QB_ONLN_DBASE_EMPLE
//TELEPHONY,QB_ONLN_DBASE_ORG
//TELEPHONY,QUOT_BIND_DETL_FACT
//TELEPHONY,REP_CALL_MTRC_DAILY_FACT
//TELEPHONY,REP_INTVL_CALL_MTRC
//TELEPHONY,SFPP_CALL_ACTVY_DLY_FACT
//TELEPHONY,SFPP_DASHBRD_CMNTS
//TELEPHONY,SRVY_SYS_QSTN_ORG
//TELEPHONY,SRVY_SYS_RSPNS_ORG
//TELEPHONY,WKFRC_MGT
//TELEPHONY,WKFRC_MGT_ORGZN
//TELEPHONY,WTNS_SC_SS_ORG
//]
//;
//
//call describe_table ('list_of_VIEWs_to_check') ;
//
//call sub_trace_event ('Completed load of table : list_of_VIEWs_to_check') ;
//
//
//// ANOTHER WAY OF CODING THIS WOULD BE A LOAD FROM A XLS FILE CONTAINING THE INFO
///$tab EXIT SCRIPT




EXIT Script;
///$tab Main 16
//set publisher.v_parameter_views_to_check = 'DAL,AUTO_CLM_PRTPT_DIM\DAL,AUTO_CLM_STTS_CHNG_TRANS_FACT\DAL,AUTO_COL_STTS_CHNG_TRANS_FACT\DAL,example_of_bad_view_name\DAL,AUTO_EST_FINAL_VER_DAILY_FACT\DAL,AUTO_FNCL_AGG_DAILY_SNPST_FACT\DAL,AUTO_RNTL_RSRV_DIM\DAL,AUTO_RNTL_BILL_DAILY_SNPS_FACT\DAL,CLM_PRFM_ORGZN_DIM\DAL,CLM_PRFM_ORGZN_NAT_DIM\\DAL,ECS_BILL_DIM\CCHD,AUTO_PLCY_hist\CCHD,BILL_CHNG_DETL_HIST\CCHD,BILL_CHNG_HIST\CCHD,BILL_CHNG_RESN_HIST\CCHD,BILL_HIST\CCHD,BILL_PARTY_ROLE_HIST\CCHD,CD_DCODE\CCHD,CD_RLTN\CCHD,CLM_GRP_DT\CCHD,CLM_GRP_HIST\CCHD,CLM_HIST\CCHD,CLM_PLCY_RLTN_HIST\CCHD,CLM_PRTPT\CCHD,CMPLT_TASK_HIST\CCHD,COL_CLM_HIST\CCHD,COL_HIST\CCHD,COL_PTL_MRG_CORR_HIST\CCHD,ECS_ORGZN_FLAT_CCHD_VW\CCHD,ECS_ORGZN_STR_FLAT_CCHD_VW\CCHD,FIRE_CLM_HIST\CCHD,FIRE_PLCY_HIST\CCHD,ORGZN_LANG_HIST\CCHD,ORGZN_SBTYP\CCHD,PLCY_AGT\CCHD,PLCY_FORM\CCHD,PMT_COL_HIST\CCHD,PRFM_HIST\CCHD,PTL_HIST\CCHD,RNTL_VEH_RSRV_RPLC\CCHD,SUIT_ADR_COL\CCHD,TASK_ASGN_HSTRY\CCHD,TASK_HIST\TELEPHONY,ASSOC_OPRTN\TELEPHONY,CALL_TYPE_INTVL_MTRC\TELEPHONY,CCN_SITE_TRGT\TELEPHONY,ENPRS_REP_INTVL_CALL_MTRC\TELEPHONY,ENPRS_SERV_OPRTN_DIM\TELEPHONY,ENPRS_SERV_RVW\TELEPHONY,ENPRS_WKFRC_MGT\TELEPHONY,ESOM_DSHBRD_CMNTS\TELEPHONY,FNCL_MTRC\TELEPHONY,QB_ONLN_DBASE_EMPLE\TELEPHONY,QB_ONLN_DBASE_ORG\TELEPHONY,QUOT_BIND_DETL_FACT\TELEPHONY,REP_CALL_MTRC_DAILY_FACT\TELEPHONY,REP_INTVL_CALL_MTRC\TELEPHONY,SFPP_CALL_ACTVY_DLY_FACT\TELEPHONY,SFPP_DASHBRD_CMNTS\TELEPHONY,SRVY_SYS_QSTN_ORG\TELEPHONY,SRVY_SYS_RSPNS_ORG\TELEPHONY,WKFRC_MGT\TELEPHONY,WKFRC_MGT_ORGZN\TELEPHONY,WTNS_SC_SS_ORG';

